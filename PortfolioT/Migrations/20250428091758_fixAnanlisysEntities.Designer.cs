// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortfolioT.DataBase;

#nullable disable

namespace PortfolioT.Migrations
{
    [DbContext(typeof(DataBaseConnection))]
    [Migration("20250428091758_fixAnanlisysEntities")]
    partial class fixAnanlisysEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortfolioT.DataBase.Models.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("link")
                        .HasColumnType("text");

                    b.Property<string>("preview")
                        .HasColumnType("text");

                    b.Property<long?>("serviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("serviceId");

                    b.HasIndex("userId");

                    b.ToTable("Achievements");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.AnalisisUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("serviceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("name", "serviceId");

                    b.HasIndex("serviceId");

                    b.ToTable("AnalisysUsers");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.AnalisysRepo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("link")
                        .HasColumnType("text");

                    b.Property<float>("scope_code")
                        .HasColumnType("real");

                    b.Property<float>("scope_decor")
                        .HasColumnType("real");

                    b.Property<float>("scope_maintability")
                        .HasColumnType("real");

                    b.Property<float>("scope_reability")
                        .HasColumnType("real");

                    b.Property<float>("scope_security")
                        .HasColumnType("real");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Analisys");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("achievementId")
                        .HasColumnType("bigint");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("achievementId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            title = "GitHub",
                            type = 1
                        },
                        new
                        {
                            Id = 2L,
                            title = "GitUlstu",
                            type = 1
                        },
                        new
                        {
                            Id = 3L,
                            title = "ElibUlstu",
                            type = 2
                        });
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("about")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("preview")
                        .HasColumnType("text");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.UserComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("moderatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("moderatorId");

                    b.HasIndex("userId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.UserService", b =>
                {
                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("serviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userId", "serviceId");

                    b.HasIndex("serviceId");

                    b.ToTable("UserServices");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Article", b =>
                {
                    b.HasBaseType("PortfolioT.DataBase.Models.Achievement");

                    b.Property<string>("words")
                        .HasColumnType("text");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Repo", b =>
                {
                    b.HasBaseType("PortfolioT.DataBase.Models.Achievement");

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("date")
                        .HasColumnType("date");

                    b.Property<string>("language")
                        .HasColumnType("text");

                    b.Property<float>("scope_code")
                        .HasColumnType("real");

                    b.Property<float>("scope_decor")
                        .HasColumnType("real");

                    b.Property<float>("scope_maintability")
                        .HasColumnType("real");

                    b.Property<float>("scope_reability")
                        .HasColumnType("real");

                    b.Property<float>("scope_security")
                        .HasColumnType("real");

                    b.Property<float>("scope_team")
                        .HasColumnType("real");

                    b.ToTable("Repos", (string)null);
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Achievement", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.Service", "service")
                        .WithMany()
                        .HasForeignKey("serviceId");

                    b.HasOne("PortfolioT.DataBase.Models.User", "user")
                        .WithMany("achievements")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("service");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.AnalisisUser", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.Service", "service")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("service");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.AnalisysRepo", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.AnalisisUser", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Image", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.Achievement", "achievement")
                        .WithMany("images")
                        .HasForeignKey("achievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("achievement");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.UserComment", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.User", "moderator")
                        .WithMany("moderatorComments")
                        .HasForeignKey("moderatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioT.DataBase.Models.User", "user")
                        .WithMany("userComments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("moderator");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.UserService", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.Service", "service")
                        .WithMany("userServices")
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioT.DataBase.Models.User", "user")
                        .WithMany("services")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("service");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Article", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.Achievement", null)
                        .WithOne()
                        .HasForeignKey("PortfolioT.DataBase.Models.Article", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Repo", b =>
                {
                    b.HasOne("PortfolioT.DataBase.Models.Achievement", null)
                        .WithOne()
                        .HasForeignKey("PortfolioT.DataBase.Models.Repo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Achievement", b =>
                {
                    b.Navigation("images");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.Service", b =>
                {
                    b.Navigation("userServices");
                });

            modelBuilder.Entity("PortfolioT.DataBase.Models.User", b =>
                {
                    b.Navigation("achievements");

                    b.Navigation("moderatorComments");

                    b.Navigation("services");

                    b.Navigation("userComments");
                });
#pragma warning restore 612, 618
        }
    }
}
